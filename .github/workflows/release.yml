name: Publish NuGet & Release

on:
  push:
    tags:
      - 'v*'
      - '*.*.*'

permissions:
  contents: write
  packages: write

env:
  PROJECT_PATH: DreamSlave.Wecom.csproj
  GHPKG_FEED: https://nuget.pkg.github.com/mq00fc/index.json
  NAMESPACE: mq00fc

jobs:
  build-pack-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: tag
        shell: bash
        run: |
          set -euo pipefail
          ref="${GITHUB_REF_NAME:-${GITHUB_REF##*/}}"
          ver="${ref#v}"
          ver="$(printf '%s' "$ver" | tr -d '\r' | sed 's/[^[:print:]]//g' | xargs)"
          echo "Raw tag: $ref"
          if ! echo "$ver" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z.-]+)?$'; then
            echo "Tag $ref is not valid semver" >&2
            exit 1
          fi
          echo "version=$ver" >> "$GITHUB_OUTPUT"
          if echo "$ver" | grep -q '-'; then
            echo "prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "prerelease=false" >> "$GITHUB_OUTPUT"
          fi
          echo "Detected version: $ver"

      - name: Setup .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.x
            8.0.x

      - name: Restore
        run: dotnet restore

      - name: Build (Release portable PDB)
        run: dotnet build "$PROJECT_PATH" -c Release --no-restore /p:ContinuousIntegrationBuild=true /p:DebugType=portable /p:DebugSymbols=true

      - name: Pack
        run: |
          mkdir -p artifacts
          dotnet pack "$PROJECT_PATH" -c Release -o artifacts \
            -p:PackageVersion=${{ steps.tag.outputs.version }} \
            -p:Version=${{ steps.tag.outputs.version }} \
            --no-build

      - name: Verify symbol package contains PDB
        run: |
          set -e
          if ls artifacts/*.snupkg >/dev/null 2>&1; then
            if ! unzip -l artifacts/*.snupkg | grep -Ei '\.pdb$' >/dev/null; then
              echo "Symbol package missing PDB" >&2
              exit 1
            fi
            echo "Symbol package OK"
          else
            echo "No snupkg produced."
          fi

      - name: Add GitHub Packages source
        run: |
          dotnet nuget remove source github || true
          dotnet nuget add source --username "${{ env.NAMESPACE }}" \
            --password "${{ secrets.GITHUB_TOKEN }}" \
            --store-password-in-clear-text \
            --name github "${{ env.GHPKG_FEED }}"

      - name: Push to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          for pkg in artifacts/*.nupkg; do
            echo "Pushing $pkg to GitHub Packages"
            dotnet nuget push "$pkg" --source github --skip-duplicate
          done
          for sym in artifacts/*.snupkg; do
            echo "Pushing $sym to GitHub Packages"
            dotnet nuget push "$sym" --source github --skip-duplicate || true
          done

      - name: Push to NuGet.org (only for stable releases)
        if: steps.tag.outputs.prerelease == 'false'
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${NUGET_API_KEY}" ]; then
            echo "NUGET_API_KEY missing; skip push to nuget.org" >&2
            exit 1
          fi
          for pkg in artifacts/*.nupkg; do
            echo "Pushing $pkg to nuget.org"
            dotnet nuget push "$pkg" --api-key "$NUGET_API_KEY" \
              --source https://api.nuget.org/v3/index.json --skip-duplicate
          done
          for sym in artifacts/*.snupkg; do
            echo "Pushing $sym to nuget.org"
            dotnet nuget push "$sym" --api-key "$NUGET_API_KEY" \
              --source https://api.nuget.org/v3/index.json --skip-duplicate || true
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: artifacts/*

      - name: Create / Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
            tag_name: ${{ github.ref_name }}
            name: Release ${{ steps.tag.outputs.version }}
            draft: false
            prerelease: ${{ steps.tag.outputs.prerelease }}
            files: |
              artifacts/*.nupkg
              artifacts/*.snupkg
            generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          {
            echo "Version: ${{ steps.tag.outputs.version }}"
            echo "PreRelease: ${{ steps.tag.outputs.prerelease }}"
            echo "Published to: GitHub Packages $( [ ${{ steps.tag.outputs.prerelease }} = false ] && echo '+ NuGet.org (stable)' )"
            echo ""
            echo "Artifacts:"
            ls -1 artifacts
          } >> "$GITHUB_STEP_SUMMARY"