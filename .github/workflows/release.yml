name: Publish NuGet & Release

on:
  push:
    tags:
      - 'v*'
      - '[0-9]+\\.[0-9]+\\.[0-9]+'

permissions:
  contents: write
  packages: write

env:
  PROJECT_PATH: "DreamSlave.Wecom.csproj"

jobs:
  build-pack-publish:
    name: Build, Pack, Publish
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: tag
        shell: bash
        run: |
          set -euo pipefail
          ref="${GITHUB_REF_NAME:-${GITHUB_REF##*/}}"
          ver="${ref#v}"
          ver="$(printf '%s' "$ver" | tr -d '\r' | sed 's/[^[:print:]]//g' | xargs)"
          echo "Raw tag: '$ref'"
          if ! echo "$ver" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z.-]+)?$'; then
            echo "Tag $ref is not a valid semver" >&2
            exit 1
          fi
            echo "Version detected: '$ver'"
          echo "version=$ver" >> "$GITHUB_OUTPUT"

      - name: Setup .NET SDKs (8 & 9)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.x
            8.0.x

      - name: Detect project file (if PROJECT_PATH not preset)
        id: detect_project
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${PROJECT_PATH}" ]; then
            echo "Using preset PROJECT_PATH=${PROJECT_PATH}"
            if [ ! -f "${PROJECT_PATH}" ]; then
              echo "Preset PROJECT_PATH does not exist: ${PROJECT_PATH}" >&2
              exit 1
            fi
            echo "project_path=${PROJECT_PATH}" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "PROJECT_PATH not preset. Auto-detecting..."
          candidates=$(find . -maxdepth 5 -type f -name '*.csproj' | sort)
          if [ -z "$candidates" ]; then
            echo "No .csproj files found." >&2
            exit 1
          fi
          echo "Found csproj files:"
          echo "$candidates"
          # 策略：优先包含主库名字的，其次第一个
          pick=$(echo "$candidates" | grep -Ei 'wecom' | head -n1 || true)
          if [ -z "$pick" ]; then
            pick=$(echo "$candidates" | head -n1)
          fi
          pick="${pick#./}"
          echo "Selected project: $pick"
          echo "project_path=$pick" >> "$GITHUB_OUTPUT"

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build --no-restore -c Release /p:ContinuousIntegrationBuild=true

      - name: Pack Library
        run: |
          set -euo pipefail
          PROJECT_FILE="${{ steps.detect_project.outputs.project_path }}"
          if [ -z "$PROJECT_FILE" ]; then
            echo "Project file not resolved." >&2
            exit 1
          fi
          mkdir -p artifacts
          dotnet pack "$PROJECT_FILE" -c Release -o artifacts \
            -p:PackageVersion=${{ steps.tag.outputs.version }} \
            -p:Version=${{ steps.tag.outputs.version }} \
            --no-build

      - name: Publish NuGet Package
        if: success()
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${NUGET_API_KEY}" ]; then
            echo "NUGET_API_KEY secret is missing." >&2
            exit 1
          fi
          shopt -s nullglob
          for pkg in artifacts/*.nupkg; do
            echo "Pushing $pkg"
            dotnet nuget push "$pkg" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate
          done
          for snupkg in artifacts/*.snupkg; do
            echo "Pushing symbols $snupkg"
            dotnet nuget push "$snupkg" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate || true
          done

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-artifacts
          path: |
            artifacts/*.nupkg
            artifacts/*.snupkg

      - name: Create / Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.tag.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.tag.outputs.version, '-') }}
          files: |
            artifacts/*.nupkg
            artifacts/*.snupkg
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          {
            echo "Published version: ${{ steps.tag.outputs.version }}"
            echo ""
            echo "Packed artifacts:"
            ls -1 artifacts
          } >> "$GITHUB_STEP_SUMMARY"